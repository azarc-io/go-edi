name: Go Tests and Code Coverage

on:
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23

      # Step 3: Install dependencies
      - name: Install Dependencies
        run: go mod tidy

      # Step 4: Run tests with code coverage
      - name: Run Tests with Coverage
        run: |
          mkdir -p coverage
          go test ./... -coverprofile=coverage/coverage.out -v

      # Step 5: Generate code coverage report in HTML format
      - name: Generate HTML Coverage Report
        run: |
          go tool cover -html=coverage/coverage.out -o coverage/coverage.html

      # Step 6: Upload coverage report artifact
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/coverage.html

      - name: Determine release type
        id: release_type
        run: |
          # Check if the branch is 'main'
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            echo "default_bump=patch" >> $GITHUB_ENV
            echo "release_type=stable" >> $GITHUB_ENV
            echo "pre_release=false" >> $GITHUB_ENV
            echo "prerelease_suffix=" >> $GITHUB_ENV
          else
            echo "default_bump=skip" >> $GITHUB_ENV
            echo "release_type=beta" >> $GITHUB_ENV
            echo "pre_release=true" >> $GITHUB_ENV
            echo "prerelease_suffix=beta" >> $GITHUB_ENV
          fi

      - name: Increment and create tag
        id: create_tag
        uses: anothrNick/github-tag-action@1.67.0
        env:
          DEFAULT_BUMP: ${{ env.default_bump }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PRERELEASE_SUFFIX: ${{ env.prerelease_suffix }}
          WITH_V: true
          PRERELEASE: ${{ env.pre_release }}
          VERBOSE: true

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.create_tag.outputs.new_tag }}
          name: "Release ${{ steps.create_tag.outputs.new_tag }}"
          body: "Automated release for version ${{ steps.create_tag.outputs.new_tag }}"
          prerelease: ${{ env.pre_release }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
